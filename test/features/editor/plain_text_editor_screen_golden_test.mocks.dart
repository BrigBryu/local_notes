// Mocks generated by Mockito 5.4.6 from annotations
// in local_notes/test/features/editor/plain_text_editor_screen_golden_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i2;
import 'package:local_notes/domain/note.dart' as _i4;
import 'package:local_notes/providers/notes_repository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAsyncNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.AsyncNotifierProviderRef<T> {
  _FakeAsyncNotifierProviderRef_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAsyncValue_1<T> extends _i1.SmartFake implements _i2.AsyncValue<T> {
  _FakeAsyncValue_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [NotesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotesRepository extends _i1.Mock implements _i3.NotesRepository {
  MockNotesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AsyncNotifierProviderRef<List<_i4.Note>> get ref =>
      (super.noSuchMethod(
            Invocation.getter(#ref),
            returnValue: _FakeAsyncNotifierProviderRef_0<List<_i4.Note>>(
              this,
              Invocation.getter(#ref),
            ),
          )
          as _i2.AsyncNotifierProviderRef<List<_i4.Note>>);

  @override
  _i2.AsyncValue<List<_i4.Note>> get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeAsyncValue_1<List<_i4.Note>>(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i2.AsyncValue<List<_i4.Note>>);

  @override
  _i5.Future<List<_i4.Note>> get future =>
      (super.noSuchMethod(
            Invocation.getter(#future),
            returnValue: _i5.Future<List<_i4.Note>>.value(<_i4.Note>[]),
          )
          as _i5.Future<List<_i4.Note>>);

  @override
  set state(_i2.AsyncValue<List<_i4.Note>>? newState) => super.noSuchMethod(
    Invocation.setter(#state, newState),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<List<_i4.Note>> build() =>
      (super.noSuchMethod(
            Invocation.method(#build, []),
            returnValue: _i5.Future<List<_i4.Note>>.value(<_i4.Note>[]),
          )
          as _i5.Future<List<_i4.Note>>);

  @override
  _i5.Future<void> addNote(_i4.Note? note) =>
      (super.noSuchMethod(
            Invocation.method(#addNote, [note]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> updateNote(_i4.Note? note) =>
      (super.noSuchMethod(
            Invocation.method(#updateNote, [note]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteNote(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteNote, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i4.Note>> searchNotes(String? keyword) =>
      (super.noSuchMethod(
            Invocation.method(#searchNotes, [keyword]),
            returnValue: _i5.Future<List<_i4.Note>>.value(<_i4.Note>[]),
          )
          as _i5.Future<List<_i4.Note>>);

  @override
  _i5.Future<_i4.Note?> getNoteById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getNoteById, [id]),
            returnValue: _i5.Future<_i4.Note?>.value(),
          )
          as _i5.Future<_i4.Note?>);

  @override
  _i5.Future<void> refreshNotes() =>
      (super.noSuchMethod(
            Invocation.method(#refreshNotes, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<int> getNextUnnamedIndex() =>
      (super.noSuchMethod(
            Invocation.method(#getNextUnnamedIndex, []),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  void listenSelf(
    void Function(
      _i2.AsyncValue<List<_i4.Note>>?,
      _i2.AsyncValue<List<_i4.Note>>,
    )?
    listener, {
    void Function(Object, StackTrace)? onError,
  }) => super.noSuchMethod(
    Invocation.method(#listenSelf, [listener], {#onError: onError}),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<List<_i4.Note>> update(
    _i5.FutureOr<List<_i4.Note>> Function(List<_i4.Note>)? cb, {
    _i5.FutureOr<List<_i4.Note>> Function(Object, StackTrace)? onError,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#update, [cb], {#onError: onError}),
            returnValue: _i5.Future<List<_i4.Note>>.value(<_i4.Note>[]),
          )
          as _i5.Future<List<_i4.Note>>);

  @override
  bool updateShouldNotify(
    _i2.AsyncValue<List<_i4.Note>>? previous,
    _i2.AsyncValue<List<_i4.Note>>? next,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateShouldNotify, [previous, next]),
            returnValue: false,
          )
          as bool);
}
